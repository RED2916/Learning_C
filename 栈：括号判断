// 1.cpp : 定义控制台应用程序的入口点。
//

#include "stdafx.h"
#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>

typedef struct{
	char *base;
	char *top;
	int stacksize;
}sqstack;


#define STACK_INIT_SIZE 100
#define STACKINCREMENT 10
//不可有分号！
int init_st( sqstack *S );
int Push( sqstack *S, char target ) ;
int Pop( sqstack* S, char* target );
int gettop( sqstack S, char* target );
int judge_brakcet( char input );

int main( void )
{
	sqstack *S;
	char input,first,output;
	int judge=0,judge1=0;
	S=( sqstack* )malloc( sizeof( sqstack ) );//初始化？
	init_st( S );
	while( 1 )//因不明原因连续循环两次才将扫描下一个括号
	{
		fflush( stdin );//防止因为换行符导致错误循环两次
		printf( "请输入括号：(X结束）\n" );
		scanf( "%c",&input );
		judge=judge_brakcet( input );
		if( judge == -1 && input != 'X' )
		{
			printf( "请正确输入括号！\n" );
		}
		else if( input == 'X' )
		{
			judge1=gettop( *S,&first );
			break;
		}
		else
		{
			gettop( *S,&first );
			if( first != input )
			{
				Push( S,input );
			}
			else
			{
				Pop( S,&output );
			}
		}
	}
	if( judge1 == -1 )//输出结果
	{
		printf( "输入合法！\n" );
	}
	else
	{
		printf( "输入不合法！\n" );
	}
	system( "pause" );
	return 1;
}

int init_st( sqstack *S )
{
	S->base=( char* )malloc( sizeof( char )*STACK_INIT_SIZE );//分配内存空间（？）
	if( !S->base )
	{
		exit( 1 );
	}
	S->top=S->base;
	S->stacksize=STACK_INIT_SIZE;
	return 1;
}

int Push( sqstack *S, char target )//入栈
{
	if( (S->top-S->base)>=S->stacksize )//重新分配内存空间
	{
		S->base=( char* )realloc( S->base,( STACK_INIT_SIZE+STACKINCREMENT )* sizeof( char ));
		if( !S->base )
		{
			exit( 1 );
		}
		S->top=S->base+S->stacksize;
		S->stacksize+= STACKINCREMENT;
	}
	*(S->top++)=target;
	return 1;
}

int Pop( sqstack* S, char* target )//出栈
{
	if( (S->top)==(S->base) )//判断栈是否为空
	{
		return -1;
	}
	*target = *( --S->top ) ;
	return 1;
}

int gettop( sqstack S, char* target )//取栈顶元素
{
	if( S.top==S.base )//判断栈是否为空
	{
		return -1;
	}
	*target = *( S.top-1 );
	return 1;
}

int judge_brakcet( char input )
{
	if( input == '{' || input == '}' || input == '[' || input == ']' || input == '<' || input == '>' || input == '(' || input == ')' )
	{
		return 1;
	}
	else
	{
		return -1;
	}
}
