// 2.cpp : 定义控制台应用程序的入口点。
//
#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>

#define MAX_V_N 20

typedef struct LinkNode {
	int adjvex;//下标
	int weight;//权值
	LinkNode* next;
};
typedef struct ArcNode {
	int vex1, vex2;//目标顶点
	int weight;//权值
}ArcNode;

typedef struct VNode {
	char data;//顶点信息
	LinkNode* first_arc;
	int degree;
}VNode, VexList[MAX_V_N];

typedef struct {
	VexList vexs;
	int vexnum, arcnum;
}ALGraph;

int Visited[MAX_V_N];

int CreateAL(ALGraph* G);
void DISP_AL(ALGraph G);
void DFS( ALGraph* G,int v );
void DFS_T_G( ALGraph G );

int main(void)
{
	ALGraph target;
	CreateAL(&target);
	DISP_AL(target);
	printf("\n");
	DFS_T_G(target);
	printf("\n");
	system("pause");
	return 0;
}

int CreateAL(ALGraph* G)
{
	ArcNode E;
	int n, e_num, vex1[MAX_V_N], vex2[MAX_V_N], input_w, i, j;
	char info_temp;
	LinkNode* Temp;
	//LinkNode input_link;
	LinkNode* input_link;//得用指针！！！不断给新空间！
	printf("请输入顶点数和边数：\n");
	scanf("%d;%d", &n, &e_num);
	G->vexnum = n;
	G->arcnum = e_num;
	for (i = 0; i < n; i++)//初始化
	{
		fflush(stdin);//清空缓冲区
		printf("请输入第%d个顶点的信息:", i);
		scanf("%c", &info_temp);
		G->vexs[i].data = info_temp;
		//G->vexs[i].first_arc=( LinkNode * )malloc( sizeof( LinkNode ));//注意！不可放在此处！NULL会把分配的内存取代！
		G->vexs[i].first_arc = NULL;
		G->vexs[i].degree = 0;
	}
	printf("\n");
	for (i = 0; i < G->arcnum; i++)
	{
		input_link = (LinkNode*)malloc(sizeof(LinkNode));//初始分配空间
		printf("请输入边的信息:");
		scanf("%d;%d;%d", &(E.vex1), &(E.vex2), &(E.weight));
		G->vexs[E.vex1].degree++;
		input_link->adjvex = E.vex2;
		input_link->weight = E.weight;
		input_link->next = G->vexs[E.vex1].first_arc;
		//input_link.next=( LinkNode * )malloc( sizeof( LinkNode ));
		//input_link.next=G->vexs[E.vex1].first_arc;//地址操作出现问题，等于自爆？
		//G->vexs[E.vex1].first_arc=&input_link;//地址操作出现问题，等于自爆？
		if (!G->vexs[E.vex1].first_arc)
		{
			G->vexs[E.vex1].first_arc = (LinkNode*)malloc(sizeof(LinkNode));
		}
		G->vexs[E.vex1].first_arc = input_link;//这里存在问题
		//printf( "%d\n",G->vexs[E.vex1].first_arc->adjvex);//赋值成功，但是好像会覆盖值
	}
	return 1;
}
void DISP_AL(ALGraph G)
{
	int i, j;
	LinkNode* Temp;
	printf("\n开始:\n");
	for (i = 0; i < G.vexnum; i++)
	{
		printf("%c:\t", G.vexs[i].data);
		printf("degree:%d\t", G.vexs[i].degree);
		if (G.vexs[i].degree != 0)
		{
			Temp = G.vexs[i].first_arc;
			for (j = 0; j < G.vexs[i].degree; j++)
			{
				printf("%d", Temp->adjvex);
				printf("(%d)\t", Temp->weight);
				Temp = Temp->next;
			}
		}
		printf("\n");
	}
}
void DFS( ALGraph* G,int v )
{
	LinkNode *p;
	Visited[v]=1;
	printf("%c\t",G->vexs[v].data);
	p=G->vexs[v].first_arc;
	while( p!=NULL ) 
	{
		if( Visited[p->adjvex]==0 )
		{
			DFS(G,p->adjvex);
		}
		p=p->next;
	}
}
void DFS_T_G( ALGraph G )
{
	int i;
	for( i=0;i<G.vexnum;i++ )
	{
		Visited[i]=0;
	}
	for( i=0; i<G.vexnum;i++ )
	{
		if( Visited[i]==0 )//防止重复 
		{
			DFS(&G,i);
		}
	}
}
