// 1.cpp : 定义控制台应用程序的入口点。
//

#include "stdafx.h"
#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>

#define LIST_ADD 10

typedef struct{
	int *address;
	int length;
	int list_size;
}sqlist;

void show_sq( sqlist list,int length );
sqlist init_sq( int length );
int insert_sq( sqlist* list,int position, int target );//插入
int delete_sq( sqlist* list,int position/*, int &target */);
int ListLength(sqlist* list);//求元素个数
int locate_sq( sqlist* list, int target );
void bubble_sort( sqlist* list,int length );
sqlist MergeList( sqlist list1 , int length1, sqlist list2, int length2 );

int main(void)
{	
	sqlist list1,list2,list3 ;
	int i,input,choose,length1,length2,length3,amount ;
	int position,target,judge ;
	list1=init_sq(100);
	printf( "请输入顺序表内容(“0”为结束)：\n" ); 
	for( i=0; i<100 ; i++ )
	{
		scanf( "%d",&input );//注意-〉、.的区别，此处指针实验失败，可改进
		if( input!=0 ) 
		{
			*(list1.address+i) = input ;
		}
		else
		{
			break;
		}
	}
	length1=i;
	show_sq( list1,length1 ) ;
	while( 1 )
	{
		printf( "\n请选择下一步行动：1.插入 2.删除 3.查找 4.求元素个数 5.排序 6.归并（需创造第二个表） 7.结束\n" );
		judge=-2;
		scanf( "%d",&choose );//获得选择
		if( choose==1 )
		{
			printf( "请输入插入位置;插入的数字：" );
			scanf("%d;%d",&position,&target);
			judge=insert_sq( &list1,position,target );
			if( judge==0 )
			{
				printf( "\n插入失败!" ) ; 
			}
			else
			{
				length1++;
				show_sq( list1,length1);
			}
		}
		else if( choose==2 )
		{
			printf( "请输入删除位置：" );
			scanf("%d",&position);
			judge=delete_sq( &list1,position );
			if( judge==0 )
			{
				printf( "\n删除失败!" ) ; 
			}
			else
			{
				length1--;
				show_sq( list1,length1 );
			}
		}
		else if( choose==3 )
		{
			printf( "请输入查找的目标：" );
			scanf("%d",&target);
			position=locate_sq( &list1,target );
			if( judge==-1 )
			{
				printf( "\n查无此数!" ) ; 
			}
			else
			{
				printf( "\n位置为：%d",position );
			}
		}
		else if( choose==4 )
		{
			amount=ListLength( &list1 );
			printf( "元素个数为：%d",amount );
		}
		else if( choose==5 )
		{
			bubble_sort( &list1 , length1 );
			show_sq( list1,length1 );
		}
		else if( choose==6 )
		{
			list2 = init_sq( 100 );
			printf( "请输入顺序表内容(“0”为结束)：\n" ); 
			for( i=0; i<100 ; i++ )
			{
				scanf( "%d",&input );//获得表2
				if( input!=0 ) 
				{
					*(list2.address+i) = input ;
				}
				else
				{
					break;
				}
			}
			length2=i;//注意
			list3=MergeList(list1, length1, list2, length2 );
			length3=length1+length2;
			printf("\n结果为：");
			show_sq( list3, length3 );
		}
		else if( choose==7 )
		{
			break;
		}
		else
		{
			printf( "请重新输入！\n" );
		}
	}
	system( "pause" ); 
	free( list1.address ); //释放内存 
	free( list2.address );
	free( list3.address )
	return 0;
}

sqlist init_sq( int length )//初始化
{
	sqlist init_list;
	init_list.length=length;
	init_list.list_size=length+5;
	init_list.address=( int * )malloc( init_list.list_size*sizeof(int) );
	return init_list;
}

void show_sq( sqlist list,int length ){//展示元素
	int i;
	for( i=0; i<length ;i++ ){
		printf("%d\t",*(list.address+i) );
	}
}

int insert_sq( sqlist* list,int position, int target )//插入
{
	//int *newbase;
	int *p,*q;
	if( position<1 || position>list->length )//判断目标合法
	{
		return 0;
	}
	else
	{
		if( list->length >= list->list_size )//表扩张
		{
			list->address=( int * )realloc( list->address, ( LIST_ADD+list->list_size )*sizeof( int ));
			list->list_size=LIST_ADD+list->list_size;
		}
		q= list->address+position-1 ;//插入位置
		//address[...]无法使用，存疑
		for( p= list->address+list->length-1 ; p>=q ;--p)//元素前移
		{
			*(p+1)= (*p);
		}
		*q=target;
		++list->length;
		return 1;
	}
}


int delete_sq( sqlist* list,int position)//删除
{
	//int *newbase;
	int *p,*q;
	if( position<1 || position>list->length )//判断目标合法
	{
		return 0;
	}
	p= list->address+position-1 ;//删除位置
	q= list->address+list->length-1 ;//表尾
	for( p++ ; p<=q ; ++p)//元素后移（watch!），注意：p+1不认！
	{
		*(p-1)= *p;
	}
	--list->length;
	return 1;
}

int locate_sq( sqlist* list, int target )//查找
{
	int i,position,judge=0;
	int *first=list->address;
	for( i=0; i<list->length ; i++ )//循环并对比，找到相等的元素
	{
		if( target==*(first+i) )
		{
			position=i;
			judge=1;
			break;
		}
	}
	if( judge == 1 )//返回位置或失败
	{
		return position;
	}
	else
	{
		return -1;
	}
}

int ListLength(sqlist* list)//求元素个数
{
	int i;
	int amount=0;
	int *first=list->address;
	for( i=0 ; i<list->length ; i++ )
	{
		if( *(first+i)!=NULL )//乱码不是NULL
		{
			amount++;
		}
	}
	return amount;
}

sqlist MergeList( sqlist list1 , int length1, sqlist list2, int length2 )//归并
{
	int i, length3=length1+length2 ;
	sqlist list3;
	list3=init_sq(200);
	for( i=0 ; i<length1; i++ )
	{
		*( list3.address+i )= *( list1.address+i ) ;
	}
	for( i=0 ; i<length2; i++ )
	{
		*( list3.address+i+length1 )= *( list2.address+i ) ;
	}
	bubble_sort( &list3, length3 );
	return list3 ;
}

void bubble_sort( sqlist* list,int length )//冒泡排序法
{
	int i,j,temp;
	for( i=0 ; i<length-1 ; i++ )
	{
		for( j=0 ; j<length-i-1 ; j++)
		{
			if( *( list->address+j ) > *( list->address+j+1 ) )//注意i、j
			{
				temp=*( list->address+j+1 );
				*( list->address+j+1 )=*( list->address+j );
				*( list->address+j )=temp;
			}
		}
	}
}
